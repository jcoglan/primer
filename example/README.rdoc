= Primer example app

This is a simple app that demonstrates how you can use Primer. It's based on
ActiveRecord for the model and Sinatra for the front-end. To start it up,
install some gems, build the database then use Rack:

  bundle install
  ruby script/setup_database.rb
  redis-server
  rabbitmq-server
  rackup -s thin -E production config.ru


=== models

Let's take a look at the internals. In the +models+ directory, you'll see a
simple blog post model:

  class Post < ActiveRecord::Base
    include Primer::Watcher
  end

That's all we need for Primer to monitor how our data changes.


=== public, views

The +public+ and +views+ directories are used by the Sinatra app, and should
be pretty self-explanatory. Note which bits of the views are cached, and which
parts don't use blocks - we set these keys up in <tt>environment.rb</tt>.


=== application.rb

The <tt>application.rb</tt> file is a simple Sinatra app - it loads the
model from <tt>environment.rb</tt> and just sets up a couple of pages.


=== environment.rb

The meat of the system is in <tt>environment.rb</tt>. This file loads the
gems we need, loads our models, and configures Primer. See that file for more
details, but note that it uses an AMQP bus - this means we can compute cache
changes outside the app process. You'll need to start <tt>worker.rb</tt> so
that your changes get processed.


=== worker.rb

This file just loads <tt>environment.rb</tt>, then tells Primer to start a
worker. The call to <tt>Primer.worker!</tt> is blocking, and makes Primer
pick up messages from the AMQP bus and process them. You can start as many
of these as you like to distribute the work. Just run:

  ruby worker.rb

If you don't run any of these, messages will build up in AMQP until you start
a worker. Each data change message goes to only one worker process so you
won't duplicate any work.


=== console.rb

You can interact with the model by starting IRB with the app's environment.
Because EventMachine does not play nice with IRB, you may need to use the
custom console to script the application:

  # in one shell:
  ruby console.rb server
  
  # in another shell
  ruby console.rb client
  >> require './environment'
  >> etc.

Go and create posts and change their data to see how the front-end reacts.
To get the real-time updates to work you must have a worker running to
update caches; this is not done by the web app process.

